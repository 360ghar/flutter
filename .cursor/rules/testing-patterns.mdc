---
globs: test/**/*.dart,test/**/*.dart
description: Testing patterns and best practices for Flutter and GetX
---

# Testing Patterns and Best Practices

## Overview
360Ghar implements comprehensive testing with unit tests, widget tests, and integration tests following Flutter testing best practices.

## Unit Testing

### Controller Testing
```dart
// test/controllers/property_controller_test.dart
import 'package:flutter_test/flutter_test.dart';
import 'package:get/get.dart';
import 'package:mocktail/mocktail.dart';

class MockPropertyRepository extends Mock implements PropertyRepository {}

void main() {
  late PropertyController controller;
  late MockPropertyRepository mockRepository;

  setUp(() {
    mockRepository = MockPropertyRepository();
    Get.put<PropertyRepository>(mockRepository);
    controller = PropertyController();
  });

  tearDown(() {
    Get.reset();
  });

  group('PropertyController', () {
    test('should fetch properties successfully', () async {
      // Arrange
      final properties = [
        PropertyModel(
          id: '1',
          title: 'Test Property',
          price: 50000,
          location: LocationModel(city: 'Mumbai', state: 'Maharashtra'),
          images: ['image1.jpg'],
          bedrooms: 2,
          bathrooms: 2,
          area: 1200,
          isFavorite: false,
        ),
      ];

      when(() => mockRepository.getProperties())
          .thenAnswer((_) async => properties);

      // Act
      await controller.fetchProperties();

      // Assert
      expect(controller.isLoading.value, false);
      expect(controller.properties.length, 1);
      expect(controller.properties.first.title, 'Test Property');
      expect(controller.error.value, null);
      verify(() => mockRepository.getProperties()).called(1);
    });

    test('should handle fetch properties error', () async {
      // Arrange
      when(() => mockRepository.getProperties())
          .thenThrow(NetworkException('Network error'));

      // Act
      await controller.fetchProperties();

      // Assert
      expect(controller.isLoading.value, false);
      expect(controller.properties.isEmpty, true);
      expect(controller.error.value, 'Network error. Please check your connection.');
      verify(() => mockRepository.getProperties()).called(1);
    });

    test('should toggle favorite status', () async {
      // Arrange
      final property = PropertyModel(
        id: '1',
        title: 'Test Property',
        price: 50000,
        location: LocationModel(city: 'Mumbai', state: 'Maharashtra'),
        images: ['image1.jpg'],
        bedrooms: 2,
        bathrooms: 2,
        area: 1200,
        isFavorite: false,
      );

      when(() => mockRepository.favoriteProperty('1'))
          .thenAnswer((_) async => {});

      controller.properties.assignAll([property]);

      // Act
      await controller.toggleFavorite(property);

      // Assert
      verify(() => mockRepository.favoriteProperty('1')).called(1);
    });
  });
}
```

### Repository Testing
```dart
// test/repositories/property_repository_test.dart
class MockPropertyApiProvider extends Mock implements PropertyApiProvider {}
class MockLocalStorageProvider extends Mock implements LocalStorageProvider {}
class MockNetworkInfo extends Mock implements NetworkInfo {}

void main() {
  late PropertyRepositoryImpl repository;
  late MockPropertyApiProvider mockApiProvider;
  late MockLocalStorageProvider mockLocalStorage;
  late MockNetworkInfo mockNetworkInfo;

  setUp(() {
    mockApiProvider = MockPropertyApiProvider();
    mockLocalStorage = MockLocalStorageProvider();
    mockNetworkInfo = MockNetworkInfo();

    repository = PropertyRepositoryImpl(
      mockApiProvider,
      mockLocalStorage,
      mockNetworkInfo,
    );
  });

  group('PropertyRepositoryImpl', () {
    test('should return properties from API when online', () async {
      // Arrange
      final properties = [PropertyModel(/* ... */)];
      when(() => mockNetworkInfo.isConnected).thenAnswer((_) async => true);
      when(() => mockApiProvider.getProperties())
          .thenAnswer((_) async => properties);

      // Act
      final result = await repository.getProperties();

      // Assert
      expect(result, properties);
      verify(() => mockApiProvider.getProperties()).called(1);
      verify(() => mockLocalStorage.cacheProperties(properties)).called(1);
    });

    test('should return cached properties when offline', () async {
      // Arrange
      final cachedProperties = [PropertyModel(/* ... */)];
      when(() => mockNetworkInfo.isConnected).thenAnswer((_) async => false);
      when(() => mockLocalStorage.getCachedProperties())
          .thenAnswer((_) async => cachedProperties);

      // Act
      final result = await repository.getProperties();

      // Assert
      expect(result, cachedProperties);
      verify(() => mockLocalStorage.getCachedProperties()).called(1);
      verifyNever(() => mockApiProvider.getProperties());
    });

    test('should return cached properties when API fails', () async {
      // Arrange
      final cachedProperties = [PropertyModel(/* ... */)];
      when(() => mockNetworkInfo.isConnected).thenAnswer((_) async => true);
      when(() => mockApiProvider.getProperties())
          .thenThrow(NetworkException('Network error'));
      when(() => mockLocalStorage.getCachedProperties())
          .thenAnswer((_) async => cachedProperties);

      // Act
      final result = await repository.getProperties();

      // Assert
      expect(result, cachedProperties);
      verify(() => mockApiProvider.getProperties()).called(1);
      verify(() => mockLocalStorage.getCachedProperties()).called(1);
    });
  });
}
```

## Widget Testing

### Widget Test Setup
```dart
// test/widgets/property_card_test.dart
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:get/get.dart';

void main() {
  late PropertyModel testProperty;

  setUp(() {
    testProperty = PropertyModel(
      id: '1',
      title: 'Beautiful 2BHK Apartment',
      price: 75000,
      location: LocationModel(city: 'Mumbai', state: 'Maharashtra'),
      images: ['image1.jpg', 'image2.jpg'],
      bedrooms: 2,
      bathrooms: 2,
      area: 1200,
      isFavorite: false,
      isVerified: true,
      tags: ['Ready to Move', 'Corner Property'],
    );
  });

  testWidgets('PropertyCard displays property information correctly',
      (WidgetTester tester) async {
    // Arrange
    bool onTapCalled = false;
    bool onFavoriteCalled = false;

    await tester.pumpWidget(
      GetMaterialApp(
        home: Scaffold(
          body: PropertyCard(
            property: testProperty,
            onTap: () => onTapCalled = true,
            onFavorite: () => onFavoriteCalled = true,
          ),
        ),
      ),
    );

    // Assert
    expect(find.text('â‚¹75,000'), findsOneWidget);
    expect(find.text('Beautiful 2BHK Apartment'), findsOneWidget);
    expect(find.text('2'), findsNWidgets(2)); // Bedrooms and Bathrooms
    expect(find.text('1,200 sq ft'), findsOneWidget);
    expect(find.byIcon(Icons.verified), findsOneWidget);
    expect(find.text('Ready to Move'), findsOneWidget);
    expect(find.text('Corner Property'), findsOneWidget);
  });

  testWidgets('PropertyCard calls onTap when tapped',
      (WidgetTester tester) async {
    // Arrange
    bool onTapCalled = false;

    await tester.pumpWidget(
      GetMaterialApp(
        home: Scaffold(
          body: PropertyCard(
            property: testProperty,
            onTap: () => onTapCalled = true,
          ),
        ),
      ),
    );

    // Act
    await tester.tap(find.byType(PropertyCard));
    await tester.pump();

    // Assert
    expect(onTapCalled, true);
  });

  testWidgets('FavoriteButton toggles favorite state',
      (WidgetTester tester) async {
    // Arrange
    bool onFavoriteCalled = false;

    await tester.pumpWidget(
      GetMaterialApp(
        home: Scaffold(
          body: FavoriteButton(
            isFavorite: false,
            onPressed: () => onFavoriteCalled = true,
          ),
        ),
      ),
    );

    // Act
    await tester.tap(find.byType(IconButton));
    await tester.pump();

    // Assert
    expect(onFavoriteCalled, true);
  });
}
```

### Controller Widget Testing
```dart
// test/widgets/property_list_view_test.dart
void main() {
  late MockPropertyController mockController;

  setUp(() {
    mockController = MockPropertyController();
    Get.put<PropertyController>(mockController);
  });

  tearDown(() {
    Get.reset();
  });

  testWidgets('PropertyListView shows loading state',
      (WidgetTester tester) async {
    // Arrange
    when(() => mockController.isLoading).thenReturn(true.obs);
    when(() => mockController.properties).thenReturn(<PropertyModel>[].obs);
    when(() => mockController.error).thenReturn(Rxn<String>());

    await tester.pumpWidget(
      GetMaterialApp(
        home: const PropertyListView(),
      ),
    );

    // Assert
    expect(find.byType(CircularProgressIndicator), findsOneWidget);
    expect(find.byType(PropertyCard), findsNothing);
  });

  testWidgets('PropertyListView shows properties list',
      (WidgetTester tester) async {
    // Arrange
    final properties = [
      PropertyModel(
        id: '1',
        title: 'Property 1',
        price: 50000,
        location: LocationModel(city: 'Mumbai', state: 'Maharashtra'),
        images: ['image1.jpg'],
        bedrooms: 2,
        bathrooms: 2,
        area: 1200,
        isFavorite: false,
      ),
    ];

    when(() => mockController.isLoading).thenReturn(false.obs);
    when(() => mockController.properties).thenReturn(properties.obs);
    when(() => mockController.error).thenReturn(Rxn<String>());

    await tester.pumpWidget(
      GetMaterialApp(
        home: const PropertyListView(),
      ),
    );

    // Assert
    expect(find.byType(CircularProgressIndicator), findsNothing);
    expect(find.byType(PropertyCard), findsOneWidget);
    expect(find.text('Property 1'), findsOneWidget);
  });

  testWidgets('PropertyListView shows error state',
      (WidgetTester tester) async {
    // Arrange
    when(() => mockController.isLoading).thenReturn(false.obs);
    when(() => mockController.properties).thenReturn(<PropertyModel>[].obs);
    when(() => mockController.error).thenReturn('Network error'.obs);

    await tester.pumpWidget(
      GetMaterialApp(
        home: const PropertyListView(),
      ),
    );

    // Assert
    expect(find.byType(CircularProgressIndicator), findsNothing);
    expect(find.byType(PropertyCard), findsNothing);
    expect(find.text('Network error'), findsOneWidget);
    expect(find.text('Retry'), findsOneWidget);
  });
}
```

## Integration Testing

### App Integration Test
```dart
// test/integration/app_test.dart
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:get/get.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  group('end-to-end test', () {
    testWidgets('complete user flow from login to property booking',
        (WidgetTester tester) async {
      // Arrange - Start the app
      await tester.pumpWidget(const MyApp());

      // Act & Assert - Login flow
      await tester.tap(find.byKey(const Key('login_button')));
      await tester.pumpAndSettle();

      await tester.enterText(
        find.byKey(const Key('email_field')),
        'test@example.com',
      );
      await tester.enterText(
        find.byKey(const Key('password_field')),
        'password123',
      );

      await tester.tap(find.byKey(const Key('submit_login')));
      await tester.pumpAndSettle();

      // Assert - Should be on dashboard
      expect(find.byKey(const Key('dashboard_screen')), findsOneWidget);

      // Act - Navigate to discover
      await tester.tap(find.byKey(const Key('discover_tab')));
      await tester.pumpAndSettle();

      // Assert - Should see property list
      expect(find.byKey(const Key('property_list')), findsOneWidget);

      // Act - Tap on first property
      await tester.tap(find.byKey(const Key('property_card_0')));
      await tester.pumpAndSettle();

      // Assert - Should be on property details
      expect(find.byKey(const Key('property_details_screen')), findsOneWidget);

      // Act - Book property
      await tester.tap(find.byKey(const Key('book_now_button')));
      await tester.pumpAndSettle();

      // Assert - Should be on booking screen
      expect(find.byKey(const Key('booking_screen')), findsOneWidget);
    });
  });
}
```

### API Integration Test
```dart
// test/integration/api_integration_test.dart
class MockDioAdapter extends HttpClientAdapter {
  @override
  Future<ResponseBody> fetch(RequestOptions options, Stream<Uint8List>? requestStream, FetchOptions? fetchOptions) async {
    // Mock different responses based on path
    switch (options.path) {
      case '/properties':
        return ResponseBody.fromString(
          jsonEncode({
            'data': [
              {
                'id': '1',
                'title': 'Test Property',
                'price': 50000,
                // ... other property fields
              },
            ],
          }),
          200,
          headers: {
            'content-type': ['application/json'],
          },
        );

      case '/user/profile':
        return ResponseBody.fromString(
          jsonEncode({
            'data': {
              'id': '1',
              'name': 'Test User',
              'email': 'test@example.com',
            },
          }),
          200,
          headers: {
            'content-type': ['application/json'],
          },
        );

      default:
        return ResponseBody.fromString(
          jsonEncode({'error': 'Not found'}),
          404,
          headers: {
            'content-type': ['application/json'],
          },
        );
    }
  }
}

void main() {
  late Dio dio;
  late PropertyApiProvider apiProvider;

  setUp(() {
    dio = Dio()..httpClientAdapter = MockDioAdapter();
    apiProvider = PropertyApiProvider();
    // Inject mock dio into provider
  });

  group('API Integration Tests', () {
    test('should fetch properties successfully', () async {
      // Act
      final properties = await apiProvider.getProperties();

      // Assert
      expect(properties.length, 1);
      expect(properties.first.title, 'Test Property');
      expect(properties.first.price, 50000);
    });

    test('should handle API errors gracefully', () async {
      // Arrange - Mock error response
      dio.httpClientAdapter = MockErrorAdapter();

      // Act & Assert
      expect(
        () => apiProvider.getProperties(),
        throwsA(isA<ServerException>()),
      );
    });
  });
}
```

## Mock Classes

### Mock Controllers
```dart
// test/mocks/mock_controllers.dart
class MockPropertyController extends Mock implements PropertyController {
  @override
  final RxBool isLoading = false.obs;

  @override
  final RxList<PropertyModel> properties = <PropertyModel>[].obs;

  @override
  final Rxn<String> error = Rxn<String>();

  @override
  Future<void> fetchProperties() async {
    // Mock implementation
  }
}
```

### Mock Services
```dart
// test/mocks/mock_services.dart
class MockAuthService extends Mock implements AuthService {
  @override
  Future<bool> login(String email, String password) async {
    if (email == 'test@example.com' && password == 'password123') {
      return true;
    }
    return false;
  }

  @override
  Future<void> logout() async {
    // Mock logout
  }
}

class MockConnectivityService extends Mock implements ConnectivityService {
  @override
  Future<bool> get isConnected async => true;
}
```

## Test Utilities

### Test Helpers
```dart
// test/test_helpers.dart
class TestHelpers {
  static Widget wrapWithMaterialApp(Widget widget) {
    return GetMaterialApp(
      home: widget,
      translations: AppTranslations(),
      locale: const Locale('en'),
      fallbackLocale: const Locale('en'),
    );
  }

  static Widget wrapWithScaffold(Widget widget) {
    return wrapWithMaterialApp(
      Scaffold(body: widget),
    );
  }

  static PropertyModel createTestProperty({
    String? id,
    String? title,
    int? price,
    LocationModel? location,
    List<String>? images,
    int? bedrooms,
    int? bathrooms,
    int? area,
    bool? isFavorite,
    bool? isVerified,
    List<String>? tags,
  }) {
    return PropertyModel(
      id: id ?? '1',
      title: title ?? 'Test Property',
      price: price ?? 50000,
      location: location ?? LocationModel(city: 'Mumbai', state: 'Maharashtra'),
      images: images ?? ['image1.jpg'],
      bedrooms: bedrooms ?? 2,
      bathrooms: bathrooms ?? 2,
      area: area ?? 1200,
      isFavorite: isFavorite ?? false,
      isVerified: isVerified ?? false,
      tags: tags ?? [],
    );
  }

  static UserModel createTestUser({
    String? id,
    String? name,
    String? email,
    bool? isProfileComplete,
  }) {
    return UserModel(
      id: id ?? '1',
      name: name ?? 'Test User',
      email: email ?? 'test@example.com',
      isProfileComplete: isProfileComplete ?? true,
    );
  }
}
```

### Custom Matchers
```dart
// test/custom_matchers.dart
class CustomMatchers {
  static Matcher isValidProperty() {
    return isA<PropertyModel>()
        .having((p) => p.id, 'id', isNotEmpty)
        .having((p) => p.title, 'title', isNotEmpty)
        .having((p) => p.price, 'price', greaterThan(0))
        .having((p) => p.location, 'location', isNotNull)
        .having((p) => p.images, 'images', isNotEmpty);
  }

  static Matcher isValidUser() {
    return isA<UserModel>()
        .having((u) => u.id, 'id', isNotEmpty)
        .having((u) => u.name, 'name', isNotEmpty)
        .having((u) => u.email, 'email', contains('@'));
  }

  static Matcher throwsNetworkException() {
    return throwsA(isA<NetworkException>());
  }

  static Matcher throwsValidationException() {
    return throwsA(isA<ValidationException>());
  }
}
```

## Test Configuration

### Test Setup
```dart
// test/setup/test_setup.dart
import 'package:flutter_test/flutter_test.dart';

void configureTestDependencies() {
  // Register mock services for testing
  Get.put<AuthService>(MockAuthService());
  Get.put<ConnectivityService>(MockConnectivityService());
  Get.put<LocalStorageService>(MockLocalStorageService());

  // Configure Dio for testing
  final dio = Dio(BaseOptions(
    baseUrl: 'https://api.test.com',
    connectTimeout: const Duration(seconds: 5),
    receiveTimeout: const Duration(seconds: 5),
  ));

  Get.put<Dio>(dio);
}

void tearDownTestDependencies() {
  Get.reset();
}

Future<void> pumpApp(WidgetTester tester, Widget widget) async {
  configureTestDependencies();

  await tester.pumpWidget(
    TestHelpers.wrapWithMaterialApp(widget),
  );

  await tester.pumpAndSettle();
}
```

## Best Practices

### 1. Test Organization
- Group tests by feature/module
- Use descriptive test names
- Follow AAA pattern (Arrange, Act, Assert)
- Keep tests focused and small

### 2. Mock Strategy
- Mock external dependencies
- Use consistent mock implementations
- Verify interactions when necessary
- Avoid over-mocking

### 3. Test Data
- Use factory methods for test data
- Create realistic test data
- Share test data across tests
- Use builders for complex objects

### 4. Assertions
- Use specific matchers
- Assert only what's relevant
- Use custom matchers for complex objects
- Verify both state and behavior

### 5. Test Coverage
- Aim for high coverage of business logic
- Test edge cases and error scenarios
- Test integration points
- Focus on user-facing features

### 6. Performance
- Use setUp and tearDown efficiently
- Avoid unnecessary widget pumps
- Mock expensive operations
- Use integration tests sparingly

### 7. Continuous Integration
- Run tests on every commit
- Set up automated testing
- Monitor test performance
- Track coverage trends