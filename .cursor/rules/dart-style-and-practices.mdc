---
globs: *.dart
---
# Dart + GetX Code Style

## Naming & Types
- **Classes/types**: PascalCase • **Variables/methods**: camelCase • **Constants**: lowerCamelCase
- Prefer meaningful names over abbreviations
- Annotate public APIs • Avoid `dynamic` • Handle nullability explicitly

## Control Flow & Formatting
- Use guard clauses • Handle errors first • Avoid deep nesting
- Match existing style • Prefer multi-line for readability
- Write concise doc comments explaining "why" not "how"

## GetX Best Practices
- Use `.obs` for reactive state • Prefer GetxController over StatefulWidget
- Expose immutable getters • Mutate only inside controller methods
- Use `SafeGetView<T>` for typed controller access

## Theme & i18n
- **No hardcoded colors**: Use `AppTheme` from [lib/app/utils/theme.dart](mdc:lib/app/utils/theme.dart)
- **No hardcoded strings**: Use `'key'.tr` with translations in [lib/app/translations/app_translations.dart](mdc:lib/app/translations/app_translations.dart)
- Use typography like `AppTheme.headlineLarge`

## Error Handling & Logging
- Wrap async calls in try/catch
- Use `ErrorHandler.handle()` and `ErrorMapper.map()`
- Log with `DebugLogger.error()`

```dart
class ExampleController extends GetxController {
  final RxBool isLoading = false.obs;

  Future<void> load() async {
    isLoading.value = true;
    try {
      // ... work
    } catch (error, stackTrace) {
      ErrorHandler.handle(ErrorMapper.map(error));
      DebugLogger.error('load failed', error, stackTrace);
    } finally {
      isLoading.value = false;
    }
  }
}
```