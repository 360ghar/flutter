---
globs: lib/features/*/views/*.dart,lib/features/*/widgets/*.dart,lib/core/widgets/*.dart
description: UI components and widget patterns for property listings and interactions
---

# UI Components and Widget Patterns

## Overview
360Ghar uses a consistent design system with reusable components for property listings, cards, and interactive elements following Material Design principles.

## Property Components

### Property Card Component
```dart
class PropertyCard extends StatelessWidget {
  final PropertyModel property;
  final VoidCallback? onTap;
  final VoidCallback? onFavorite;
  final bool showFavoriteButton;
  final bool isCompact;

  const PropertyCard({
    super.key,
    required this.property,
    this.onTap,
    this.onFavorite,
    this.showFavoriteButton = true,
    this.isCompact = false,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      elevation: 2,
      child: InkWell(
        borderRadius: BorderRadius.circular(12),
        onTap: onTap,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Property Image with Overlay
            PropertyImageWidget(
              images: property.images,
              height: isCompact ? 120 : 180,
              borderRadius: const BorderRadius.vertical(
                top: Radius.circular(12),
              ),
              overlay: _buildImageOverlay(),
            ),

            // Property Details
            Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Price and Status
                  Row(
                    children: [
                      Text(
                        'â‚¹${property.price.formatPrice()}',
                        style: theme.textTheme.titleLarge?.copyWith(
                          fontWeight: FontWeight.bold,
                          color: theme.colorScheme.primary,
                        ),
                      ),
                      const Spacer(),
                      if (property.isVerified)
                        VerifiedBadge.small(),
                    ],
                  ),

                  const SizedBox(height: 4),

                  // Property Title
                  Text(
                    property.title,
                    style: theme.textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.w600,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),

                  const SizedBox(height: 8),

                  // Property Features
                  Row(
                    children: [
                      _buildFeature(
                        icon: Icons.king_bed_outlined,
                        text: '${property.bedrooms}',
                      ),
                      const SizedBox(width: 12),
                      _buildFeature(
                        icon: Icons.bathtub_outlined,
                        text: '${property.bathrooms}',
                      ),
                      const SizedBox(width: 12),
                      _buildFeature(
                        icon: Icons.square_foot,
                        text: '${property.area} sq ft',
                      ),
                    ],
                  ),

                  const SizedBox(height: 8),

                  // Location
                  Row(
                    children: [
                      Icon(
                        Icons.location_on_outlined,
                        size: 16,
                        color: theme.colorScheme.onSurfaceVariant,
                      ),
                      const SizedBox(width: 4),
                      Expanded(
                        child: Text(
                          property.location.displayAddress,
                          style: theme.textTheme.bodySmall?.copyWith(
                            color: theme.colorScheme.onSurfaceVariant,
                          ),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                    ],
                  ),

                  if (!isCompact) ...[
                    const SizedBox(height: 12),
                    // Property Tags
                    Wrap(
                      spacing: 6,
                      runSpacing: 6,
                      children: property.tags.map((tag) => PropertyTag(tag: tag)).toList(),
                    ),
                  ],
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildImageOverlay() {
    return Positioned(
      top: 8,
      right: 8,
      child: Row(
        children: [
          if (showFavoriteButton)
            FavoriteButton(
              isFavorite: property.isFavorite,
              onPressed: onFavorite,
            ),
          if (property.isPremium)
            const PremiumBadge(),
        ],
      ),
    );
  }

  Widget _buildFeature({required IconData icon, required String text}) {
    final theme = Theme.of(context);

    return Row(
      children: [
        Icon(
          icon,
          size: 16,
          color: theme.colorScheme.onSurfaceVariant,
        ),
        const SizedBox(width: 4),
        Text(
          text,
          style: theme.textTheme.bodySmall?.copyWith(
            color: theme.colorScheme.onSurfaceVariant,
          ),
        ),
      ],
    );
  }
}
```

### Property Image Widget
```dart
class PropertyImageWidget extends StatelessWidget {
  final List<String> images;
  final double height;
  final BorderRadius? borderRadius;
  final Widget? overlay;
  final BoxFit fit;
  final bool showImageCount;

  const PropertyImageWidget({
    super.key,
    required this.images,
    required this.height,
    this.borderRadius,
    this.overlay,
    this.fit = BoxFit.cover,
    this.showImageCount = true,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      height: height,
      width: double.infinity,
      decoration: BoxDecoration(
        borderRadius: borderRadius,
      ),
      child: Stack(
        children: [
          // Main Image
          if (images.isNotEmpty)
            CachedNetworkImage(
              imageUrl: images.first,
              fit: fit,
              width: double.infinity,
              height: height,
              placeholder: (context, url) => ShimmerLoading(
                width: double.infinity,
                height: height,
              ),
              errorWidget: (context, url, error) => Container(
                color: Theme.of(context).colorScheme.surfaceVariant,
                child: Icon(
                  Icons.image_not_supported_outlined,
                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                ),
              ),
            )
          else
            Container(
              color: Theme.of(context).colorScheme.surfaceVariant,
              child: Icon(
                Icons.image_not_supported_outlined,
                color: Theme.of(context).colorScheme.onSurfaceVariant,
              ),
            ),

          // Image Count Badge
          if (showImageCount && images.length > 1)
            Positioned(
              bottom: 8,
              right: 8,
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.black.withOpacity(0.7),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  '${images.length} photos',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Colors.white,
                    fontSize: 10,
                  ),
                ),
              ),
            ),

          // Custom Overlay
          if (overlay != null) overlay!,
        ],
      ),
    );
  }
}
```

### Property List Widget
```dart
class PropertyListWidget extends StatelessWidget {
  final List<PropertyModel> properties;
  final ScrollController? scrollController;
  final VoidCallback? onLoadMore;
  final bool isLoading;
  final bool isLoadingMore;
  final Widget? emptyWidget;
  final bool showCompactView;

  const PropertyListWidget({
    super.key,
    required this.properties,
    this.scrollController,
    this.onLoadMore,
    this.isLoading = false,
    this.isLoadingMore = false,
    this.emptyWidget,
    this.showCompactView = false,
  });

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return const PropertyListSkeleton();
    }

    if (properties.isEmpty) {
      return emptyWidget ?? const EmptyStateWidget(
        icon: Icons.home_outlined,
        title: 'No properties found',
        message: 'Try adjusting your search criteria',
      );
    }

    return RefreshIndicator(
      onRefresh: () async {
        // Trigger refresh
      },
      child: ListView.builder(
        controller: scrollController,
        padding: const EdgeInsets.symmetric(vertical: 8),
        itemCount: properties.length + (isLoadingMore ? 1 : 0),
        itemBuilder: (context, index) {
          if (index == properties.length) {
            return const LoadingMoreWidget();
          }

          final property = properties[index];
          return PropertyCard(
            property: property,
            isCompact: showCompactView,
            onTap: () => _navigateToPropertyDetails(property),
            onFavorite: () => _toggleFavorite(property),
          );
        },
      ),
    );
  }

  void _navigateToPropertyDetails(PropertyModel property) {
    Get.toNamed(AppRoutes.propertyDetails(property.id));
  }

  void _toggleFavorite(PropertyModel property) {
    // Handle favorite toggle
  }
}
```

## Interactive Components

### Favorite Button
```dart
class FavoriteButton extends StatefulWidget {
  final bool isFavorite;
  final VoidCallback? onPressed;
  final double size;

  const FavoriteButton({
    super.key,
    required this.isFavorite,
    this.onPressed,
    this.size = 24,
  });

  @override
  State<FavoriteButton> createState() => _FavoriteButtonState();
}

class _FavoriteButtonState extends State<FavoriteButton>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(begin: 1.0, end: 1.2).animate(
      CurvedAnimation(parent: _controller, curve: Curves.elasticOut),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return ScaleTransition(
      scale: _scaleAnimation,
      child: IconButton(
        onPressed: () {
          _controller.forward().then((_) => _controller.reverse());
          widget.onPressed?.call();
        },
        icon: Icon(
          widget.isFavorite
              ? Icons.favorite
              : Icons.favorite_border_outlined,
          color: widget.isFavorite
              ? theme.colorScheme.error
              : theme.colorScheme.onSurface,
          size: widget.size,
        ),
        style: IconButton.styleFrom(
          backgroundColor: Colors.white.withOpacity(0.9),
          foregroundColor: widget.isFavorite
              ? theme.colorScheme.error
              : theme.colorScheme.onSurface,
        ),
      ),
    );
  }
}
```

### Filter Chip Widget
```dart
class FilterChipWidget extends StatelessWidget {
  final String label;
  final bool isSelected;
  final VoidCallback? onSelected;
  final Widget? avatar;

  const FilterChipWidget({
    super.key,
    required this.label,
    this.isSelected = false,
    this.onSelected,
    this.avatar,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return FilterChip(
      label: Text(label),
      avatar: avatar,
      selected: isSelected,
      onSelected: onSelected != null ? (_) => onSelected!() : null,
      backgroundColor: theme.colorScheme.surface,
      selectedColor: theme.colorScheme.primaryContainer,
      checkmarkColor: theme.colorScheme.onPrimaryContainer,
      labelStyle: TextStyle(
        color: isSelected
            ? theme.colorScheme.onPrimaryContainer
            : theme.colorScheme.onSurface,
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
        side: BorderSide(
          color: isSelected
              ? theme.colorScheme.primary
              : theme.colorScheme.outline,
        ),
      ),
    );
  }
}
```

### Search Bar Widget
```dart
class PropertySearchBar extends StatefulWidget {
  final String? hintText;
  final Function(String)? onSearch;
  final VoidCallback? onFilterTap;
  final bool showFilterButton;

  const PropertySearchBar({
    super.key,
    this.hintText,
    this.onSearch,
    this.onFilterTap,
    this.showFilterButton = true,
  });

  @override
  State<PropertySearchBar> createState() => _PropertySearchBarState();
}

class _PropertySearchBarState extends State<PropertySearchBar> {
  final TextEditingController _controller = TextEditingController();
  final FocusNode _focusNode = FocusNode();
  Timer? _debounceTimer;

  @override
  void dispose() {
    _controller.dispose();
    _focusNode.dispose();
    _debounceTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Container(
      height: 48,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      decoration: BoxDecoration(
        color: theme.colorScheme.surface,
        borderRadius: BorderRadius.circular(24),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          const SizedBox(width: 16),
          Icon(
            Icons.search,
            color: theme.colorScheme.onSurfaceVariant,
          ),
          const SizedBox(width: 12),
          Expanded(
            child: TextField(
              controller: _controller,
              focusNode: _focusNode,
              decoration: InputDecoration(
                hintText: widget.hintText ?? 'Search properties...',
                border: InputBorder.none,
                hintStyle: theme.textTheme.bodyLarge?.copyWith(
                  color: theme.colorScheme.onSurfaceVariant,
                ),
              ),
              onChanged: _onSearchChanged,
              textInputAction: TextInputAction.search,
              onSubmitted: widget.onSearch,
            ),
          ),
          if (widget.showFilterButton) ...[
            IconButton(
              onPressed: widget.onFilterTap,
              icon: Icon(
                Icons.filter_list,
                color: theme.colorScheme.onSurfaceVariant,
              ),
            ),
            const SizedBox(width: 8),
          ],
        ],
      ),
    );
  }

  void _onSearchChanged(String value) {
    _debounceTimer?.cancel();
    _debounceTimer = Timer(const Duration(milliseconds: 500), () {
      widget.onSearch?.call(value);
    });
  }
}
```

## Loading and Empty States

### Property List Skeleton
```dart
class PropertyListSkeleton extends StatelessWidget {
  const PropertyListSkeleton({super.key});

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      padding: const EdgeInsets.symmetric(vertical: 8),
      itemCount: 5,
      itemBuilder: (context, index) => const PropertyCardSkeleton(),
    );
  }
}

class PropertyCardSkeleton extends StatelessWidget {
  const PropertyCardSkeleton({super.key});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ShimmerLoading(
            width: double.infinity,
            height: 180,
            borderRadius: const BorderRadius.vertical(
              top: Radius.circular(12),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                ShimmerLoading(width: 120, height: 24),
                const SizedBox(height: 8),
                ShimmerLoading(width: double.infinity, height: 20),
                const SizedBox(height: 8),
                Row(
                  children: [
                    ShimmerLoading(width: 60, height: 16),
                    const SizedBox(width: 12),
                    ShimmerLoading(width: 60, height: 16),
                    const SizedBox(width: 12),
                    ShimmerLoading(width: 60, height: 16),
                  ],
                ),
                const SizedBox(height: 8),
                ShimmerLoading(width: 150, height: 16),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
```

### Empty State Widget
```dart
class EmptyStateWidget extends StatelessWidget {
  final IconData icon;
  final String title;
  final String message;
  final Widget? actionButton;

  const EmptyStateWidget({
    super.key,
    required this.icon,
    required this.title,
    required this.message,
    this.actionButton,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Center(
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              size: 64,
              color: theme.colorScheme.onSurfaceVariant,
            ),
            const SizedBox(height: 16),
            Text(
              title,
              style: theme.textTheme.headlineSmall?.copyWith(
                color: theme.colorScheme.onSurface,
              ),
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 8),
            Text(
              message,
              style: theme.textTheme.bodyLarge?.copyWith(
                color: theme.colorScheme.onSurfaceVariant,
              ),
              textAlign: TextAlign.center,
            ),
            if (actionButton != null) ...[
              const SizedBox(height: 24),
              actionButton!,
            ],
          ],
        ),
      ),
    );
  }
}
```

### Loading More Widget
```dart
class LoadingMoreWidget extends StatelessWidget {
  const LoadingMoreWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          SizedBox(
            width: 20,
            height: 20,
            child: CircularProgressIndicator(
              strokeWidth: 2,
              color: Theme.of(context).colorScheme.primary,
            ),
          ),
          const SizedBox(width: 12),
          Text(
            'Loading more properties...',
            style: Theme.of(context).textTheme.bodyMedium?.copyWith(
              color: Theme.of(context).colorScheme.onSurfaceVariant,
            ),
          ),
        ],
      ),
    );
  }
}
```

## Utility Widgets

### Shimmer Loading Widget
```dart
class ShimmerLoading extends StatefulWidget {
  final double width;
  final double height;
  final BorderRadius? borderRadius;

  const ShimmerLoading({
    super.key,
    required this.width,
    required this.height,
    this.borderRadius,
  });

  @override
  State<ShimmerLoading> createState() => _ShimmerLoadingState();
}

class _ShimmerLoadingState extends State<ShimmerLoading>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    )..repeat();

    _animation = Tween<double>(begin: -2, end: 2).animate(
      CurvedAnimation(parent: _controller, curve: Curves.easeInOut),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _animation,
      builder: (context, child) {
        return Container(
          width: widget.width,
          height: widget.height,
          decoration: BoxDecoration(
            borderRadius: widget.borderRadius ?? BorderRadius.circular(4),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Colors.grey[300]!,
                Colors.grey[100]!,
                Colors.grey[300]!,
              ],
              stops: [
                0.0,
                _animation.value,
                1.0,
              ],
            ),
          ),
        );
      },
    );
  }
}
```

## Best Practices

### 1. Component Reusability
- Create small, focused components
- Use consistent naming conventions
- Implement proper prop interfaces
- Make components theme-aware

### 2. Performance Optimization
- Use const constructors where possible
- Implement proper key usage for lists
- Use efficient rebuild patterns
- Cache expensive computations

### 3. Accessibility
- Provide semantic labels
- Ensure proper contrast ratios
- Support screen readers
- Implement keyboard navigation

### 4. Responsive Design
- Use MediaQuery for responsive layouts
- Implement adaptive components
- Test on different screen sizes
- Handle orientation changes

### 5. Loading States
- Always show loading states for async operations
- Use skeleton screens for better UX
- Implement pull-to-refresh
- Handle error states gracefully

### 6. User Interaction
- Provide visual feedback for interactions
- Implement proper touch targets
- Use consistent gesture patterns
- Handle edge cases gracefully