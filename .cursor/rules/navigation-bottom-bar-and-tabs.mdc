---
globs: lib/core/routes/*.dart,lib/**/*.dart
description: Navigation patterns and bottom navigation implementation
---

# Navigation and Routing Guidelines

## Route Management
The app uses GetX for navigation with named routes and middleware support.

### Route Definition Structure
```dart
// ✅ Good: Organized route definitions
class AppPages {
  // Auth routes
  static const String splash = '/splash';
  static const String login = '/login';
  static const String register = '/register';
  static const String profileCompletion = '/profile-completion';

  // Main app routes
  static const String dashboard = '/dashboard';
  static const String discover = '/discover';
  static const String profile = '/profile';
  static const String bookings = '/bookings';

  // Feature routes
  static const String propertyDetails = '/property/:id';
  static const String bookingDetails = '/booking/:id';
  static const String locationSearch = '/location-search';

  static final routes = [
    // Auth routes
    GetPage(
      name: splash,
      page: () => const SplashView(),
      binding: SplashBinding(),
    ),
    GetPage(
      name: login,
      page: () => const LoginView(),
      binding: LoginBinding(),
      middlewares: [AuthMiddleware()],
    ),

    // Protected routes
    GetPage(
      name: dashboard,
      page: () => const DashboardView(),
      binding: DashboardBinding(),
      middlewares: [AuthGuard()],
    ),

    // Dynamic routes
    GetPage(
      name: propertyDetails,
      page: () => PropertyDetailsView(),
      binding: PropertyDetailsBinding(),
    ),
  ];
}
```

### Route Parameters
```dart
// ✅ Good: Type-safe parameter handling
class RouteParams {
  static String propertyDetails(String propertyId) {
    return '/property/$propertyId';
  }

  static String bookingDetails(String bookingId) {
    return '/booking/$bookingId';
  }
}

// Usage
Get.toNamed(RouteParams.propertyDetails('123'));
```

## Navigation Patterns
### Basic Navigation
```dart
// ✅ Good: Proper navigation methods
class NavigationService {
  // Navigate to new page
  static void toNamed(String route, {dynamic arguments}) {
    Get.toNamed(route, arguments: arguments);
  }

  // Replace current page
  static void offNamed(String route, {dynamic arguments}) {
    Get.offNamed(route, arguments: arguments);
  }

  // Replace all pages (clear stack)
  static void offAllNamed(String route, {dynamic arguments}) {
    Get.offAllNamed(route, arguments: arguments);
  }

  // Go back
  static void back({dynamic result}) {
    Get.back(result: result);
  }

  // Go back multiple times
  static void backTo(String route) {
    Get.until((route) => Get.currentRoute == route);
  }
}
```

### Navigation with Results
```dart
// ✅ Good: Navigation with return values
class LocationSearchView extends GetView<LocationSearchController> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.close),
          onPressed: () => Get.back(), // Cancel search
        ),
      ),
      body: ListView.builder(
        itemBuilder: (context, index) {
          final location = controller.locations[index];
          return ListTile(
            title: Text(location.name),
            onTap: () => Get.back(result: location), // Return selected location
          );
        },
      ),
    );
  }
}

// Usage
final selectedLocation = await Get.toNamed('/location-search');
if (selectedLocation != null) {
  // Handle selected location
}
```

## Bottom Navigation Implementation
### Bottom Navigation Controller
```dart
// ✅ Good: Centralized navigation state management
class BottomNavController extends GetxController {
  final currentIndex = 0.obs;
  final isVisible = true.obs;

  final pages = [
    const DashboardView(),
    const DiscoverView(),
    const BookingsView(),
    const ProfileView(),
  ];

  void changePage(int index) {
    if (index != currentIndex.value) {
      currentIndex.value = index;
    }
  }

  void toggleVisibility() {
    isVisible.value = !isVisible.value;
  }

  void hide() {
    isVisible.value = false;
  }

  void show() {
    isVisible.value = true;
  }
}
```

### Bottom Navigation Widget
```dart
// ✅ Good: Animated bottom navigation
class CustomBottomNavigation extends GetView<BottomNavController> {
  @override
  Widget build(BuildContext context) {
    return Obx(() {
      if (!controller.isVisible.value) {
        return const SizedBox.shrink();
      }

      return Container(
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surface,
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, -2),
            ),
          ],
        ),
        child: NavigationBar(
          selectedIndex: controller.currentIndex.value,
          onDestinationSelected: controller.changePage,
          destinations: const [
            NavigationDestination(
              icon: Icon(Icons.home_outlined),
              selectedIcon: Icon(Icons.home),
              label: 'Home',
            ),
            NavigationDestination(
              icon: Icon(Icons.search_outlined),
              selectedIcon: Icon(Icons.search),
              label: 'Discover',
            ),
            NavigationDestination(
              icon: Icon(Icons.calendar_today_outlined),
              selectedIcon: Icon(Icons.calendar_today),
              label: 'Bookings',
            ),
            NavigationDestination(
              icon: Icon(Icons.person_outlined),
              selectedIcon: Icon(Icons.person),
              label: 'Profile',
            ),
          ],
        ),
      );
    });
  }
}
```

### Main Navigation Wrapper
```dart
// ✅ Good: Navigation wrapper with bottom bar
class MainNavigationWrapper extends GetView<BottomNavController> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Obx(() {
        final currentPage = controller.pages[controller.currentIndex.value];
        return currentPage;
      }),
      bottomNavigationBar: const CustomBottomNavigation(),

      // Optional: Floating action button for main actions
      floatingActionButton: FloatingActionButton(
        onPressed: () => Get.toNamed('/add-booking'),
        child: const Icon(Icons.add),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
    );
  }
}
```

## Middleware and Guards
### Authentication Middleware
```dart
// ✅ Good: Route guards for authentication
class AuthGuard extends GetMiddleware {
  @override
  RouteSettings? redirect(String? route) {
    final authService = Get.find<AuthService>();
    final isAuthenticated = authService.isAuthenticated.value;

    if (!isAuthenticated) {
      return RouteSettings(name: AppPages.login);
    }
    return null;
  }

  @override
  GetPage? onPageCalled(GetPage? page) {
    // Called before route is displayed
    return page;
  }
}
```

### Role-Based Access Control
```dart
// ✅ Good: Role-based route protection
class RoleGuard extends GetMiddleware {
  final List<String> allowedRoles;

  RoleGuard(this.allowedRoles);

  @override
  RouteSettings? redirect(String? route) {
    final authService = Get.find<AuthService>();
    final userRole = authService.user.value?.role;

    if (userRole == null || !allowedRoles.contains(userRole)) {
      return RouteSettings(name: AppPages.unauthorized);
    }
    return null;
  }
}

// Usage in routes
GetPage(
  name: '/admin',
  page: () => AdminView(),
  middlewares: [AuthGuard(), RoleGuard(['admin', 'super_admin'])],
),
```

## Deep Linking
### Deep Link Configuration
```dart
// ✅ Good: Deep linking setup
class DeepLinkService {
  static void init() {
    // Handle deep links
    Get.config(
      enableLog: true,
      logWriterCallback: (text, {isError = false}) {
        debugPrint('GetX Log: $text');
      },
    );
  }

  static void handleDeepLink(String link) {
    final uri = Uri.parse(link);

    switch (uri.path) {
      case '/property':
        final propertyId = uri.queryParameters['id'];
        if (propertyId != null) {
          Get.toNamed('/property/$propertyId');
        }
        break;
      case '/booking':
        final bookingId = uri.queryParameters['id'];
        if (bookingId != null) {
          Get.toNamed('/booking/$bookingId');
        }
        break;
      default:
        Get.toNamed('/');
    }
  }
}
```

## Navigation Best Practices
### Navigation State Management
```dart
// ✅ Good: Navigation state tracking
class NavigationHistory {
  static final List<String> _history = [];
  static final List<String> _future = [];

  static void push(String route) {
    _history.add(route);
    _future.clear();
  }

  static String? pop() {
    if (_history.isNotEmpty) {
      final route = _history.removeLast();
      _future.add(route);
      return route;
    }
    return null;
  }

  static String? get current => _history.isNotEmpty ? _history.last : null;
  static String? get previous => _history.length > 1 ? _history[_history.length - 2] : null;
}
```

### Conditional Navigation
```dart
// ✅ Good: Smart navigation based on app state
class SmartNavigation {
  static void navigateBasedOnAuthStatus() {
    final authService = Get.find<AuthService>();

    ever(authService.isAuthenticated, (bool isAuth) {
      if (isAuth) {
        if (authService.user.value?.isProfileComplete == false) {
          Get.offAllNamed(AppPages.profileCompletion);
        } else {
          Get.offAllNamed(AppPages.dashboard);
        }
      } else {
        Get.offAllNamed(AppPages.login);
      }
    });
  }
}
```

## Tab Navigation
### Tab Controller Implementation
```dart
// ✅ Good: Tab-based navigation
class TabNavigationController extends GetxController with SingleGetTickerProviderMixin {
  late TabController tabController;
  final currentTab = 0.obs;

  @override
  void onInit() {
    super.onInit();
    tabController = TabController(length: 3, vsync: this);
    tabController.addListener(() {
      currentTab.value = tabController.index;
    });
  }

  @override
  void onClose() {
    tabController.dispose();
    super.onClose();
  }

  void changeTab(int index) {
    tabController.animateTo(index);
  }
}
```

### Tab Bar Widget
```dart
// ✅ Good: Custom tab bar implementation
class CustomTabBar extends GetView<TabNavigationController> {
  @override
  Widget build(BuildContext context) {
    return TabBar(
      controller: controller.tabController,
      tabs: const [
        Tab(text: 'All'),
        Tab(text: 'Active'),
        Tab(text: 'Completed'),
      ],
      onTap: controller.changeTab,
      indicatorColor: Theme.of(context).colorScheme.primary,
      labelColor: Theme.of(context).colorScheme.primary,
      unselectedLabelColor: Theme.of(context).colorScheme.onSurfaceVariant,
    );
  }
}
```

This rule applies to navigation-related files and components.