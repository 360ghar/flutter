---
globs: lib/app/data/**/*.dart
---
# Data Layer & Networking

## Models
- Define in `lib/app/data/models/` • Keep JSON serialization consistent
- Prefer newer variants if legacy versions exist (e.g., `*_new.dart`)

## Repositories
- Encapsulate data access in `lib/app/data/repositories/`
- Call services/providers and map results to domain models
- Handle caching, pagination, and data transformation

## Providers & API
- Use `ApiClient` for HTTP with interceptors
- Implement endpoint logic in `ApiService` or `ApiProvider`
- Keep network calls async • Avoid heavy work on UI thread

## Error Handling & Logging
- Map errors via `ErrorMapper.map()` • Handle via `ErrorHandler.handle()`
- Log with `DebugLogger` for network diagnostics

```dart
Future<List<PropertyModel>> fetchRecommended() async {
  try {
    final response = await apiService.getRecommendedProperties();
    return response.properties;
  } catch (error, stack) {
    ErrorHandler.handle(ErrorMapper.map(error));
    DebugLogger.error('fetchRecommended failed', error, stack);
    rethrow;
  }
}
```